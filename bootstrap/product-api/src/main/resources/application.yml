spring:
  application:
    name: ${SERVICE_NAME:product-api}
    version: ${SERVICE_VERSION:1.0.0}
  
  profiles:
    active: ${SPRING_PROFILES_ACTIVE:dev}
  
  # 데이터베이스 설정
  datasource:
    url: ${DB_URL:jdbc:h2:mem:testdb}
    username: ${DB_USERNAME:sa}
    password: ${DB_PASSWORD:}
    driver-class-name: ${DB_DRIVER:org.h2.Driver}
  
  # JPA 설정
  jpa:
    hibernate:
      ddl-auto: ${JPA_DDL_AUTO:create-drop}
    show-sql: ${JPA_SHOW_SQL:true}
    properties:
      hibernate:
        format_sql: true
        dialect: ${JPA_DIALECT:org.hibernate.dialect.H2Dialect}
  
  # Redis 설정 (선택사항)
  data:
    redis:
      host: ${REDIS_HOST:}
      port: ${REDIS_PORT:6379}
      password: ${REDIS_PASSWORD:}
  
  # Kafka 설정 (선택사항)
  kafka:
    bootstrap-servers: ${KAFKA_BOOTSTRAP_SERVERS:}
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer

# Kafka 재시도 설정
kafka:
  retry:
    max-attempts: ${KAFKA_RETRY_MAX_ATTEMPTS:3}
    backoff-millis: ${KAFKA_RETRY_BACKOFF_MILLIS:1000}
    backoff-multiplier: ${KAFKA_RETRY_BACKOFF_MULTIPLIER:2.0}
    max-backoff-millis: ${KAFKA_RETRY_MAX_BACKOFF_MILLIS:30000}

# 서버 설정
server:
  port: ${SERVER_PORT:8080}
  servlet:
    context-path: /api/v1

# Actuator 설정
management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics
  endpoint:
    health:
      show-details: when-authorized

# Eureka 설정
eureka:
  client:
    service-url:
      defaultZone: ${EUREKA_URL:http://localhost:8761/eureka/}
    fetch-registry: true
    register-with-eureka: true
  instance:
    prefer-ip-address: true

# 로깅 설정
logging:
  level:
    com.commerce.product: ${LOG_LEVEL:DEBUG}
    org.springframework.security: ${SECURITY_LOG_LEVEL:INFO}
    org.hibernate.SQL: ${SQL_LOG_LEVEL:DEBUG}
  pattern:
    console: "%d{HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n"

# 이벤트 발행 재시도 정책 설정
event:
  publication:
    retry:
      max-attempts: ${EVENT_RETRY_MAX_ATTEMPTS:3}
      initial-delay: ${EVENT_RETRY_INITIAL_DELAY:1000}
      max-delay: ${EVENT_RETRY_MAX_DELAY:5000}
      multiplier: ${EVENT_RETRY_MULTIPLIER:2}

# 재고 서비스 설정
stock:
  availability:
    timeout:
      seconds: ${STOCK_AVAILABILITY_TIMEOUT_SECONDS:5}

# 스레드 풀 설정
executor:
  io-task:
    core-pool-size: ${IO_TASK_EXECUTOR_CORE_POOL_SIZE:10}
    max-pool-size: ${IO_TASK_EXECUTOR_MAX_POOL_SIZE:50}
    queue-capacity: ${IO_TASK_EXECUTOR_QUEUE_CAPACITY:100}
    thread-name-prefix: ${IO_TASK_EXECUTOR_THREAD_NAME_PREFIX:io-task-}
